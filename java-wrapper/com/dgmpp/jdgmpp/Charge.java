/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.dgmpp.jdgmpp;

public class Charge extends Type {
  private transient long swigCPtr;

  protected Charge(long cPtr, boolean cMemoryOwn) {
    super(dgmppJNI.Charge_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Charge obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        dgmppJNI.delete_Charge(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public Charge.Size size() {
    return Charge.Size.swigToEnum(dgmppJNI.Charge_size(swigCPtr, this));
  }

  public final static class Size {
    public final static Charge.Size none = new Charge.Size("none", dgmppJNI.Charge_Size_none_get());
    public final static Charge.Size small = new Charge.Size("small", dgmppJNI.Charge_Size_small_get());
    public final static Charge.Size medium = new Charge.Size("medium", dgmppJNI.Charge_Size_medium_get());
    public final static Charge.Size large = new Charge.Size("large", dgmppJNI.Charge_Size_large_get());
    public final static Charge.Size xLarge = new Charge.Size("xLarge", dgmppJNI.Charge_Size_xLarge_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Size swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Size.class + " with value " + swigValue);
    }

    private Size(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Size(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Size(String swigName, Size swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Size[] swigValues = { none, small, medium, large, xLarge };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}

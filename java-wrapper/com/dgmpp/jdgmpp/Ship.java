/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.dgmpp.jdgmpp;

public class Ship extends Type {
  private transient long swigCPtr;

  protected Ship(long cPtr, boolean cMemoryOwn) {
    super(dgmppJNI.Ship_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Ship obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        dgmppJNI.delete_Ship(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public CategoryIDs supportedDroneCategories() {
    return new CategoryIDs(dgmppJNI.Ship_supportedDroneCategories(swigCPtr, this), true);
  }

  public Ship.RigSize rigSize() {
    return Ship.RigSize.swigToEnum(dgmppJNI.Ship_rigSize(swigCPtr, this));
  }

  public void damagePattern(DamageVector pattern) {
    dgmppJNI.Ship_damagePattern__SWIG_0(swigCPtr, this, DamageVector.getCPtr(pattern), pattern);
  }

  public DamageVector damagePattern() {
    return new DamageVector(dgmppJNI.Ship_damagePattern__SWIG_1(swigCPtr, this), false);
  }

  public Module addModule(TypeID typeID, boolean ignoringRequirements, int socket) {
    long cPtr = dgmppJNI.Ship_addModule__SWIG_0(swigCPtr, this, typeID.swigValue(), ignoringRequirements, socket);
    return (cPtr == 0) ? null : new Module(cPtr, false);
  }

  public Module addModule(TypeID typeID, boolean ignoringRequirements) {
    long cPtr = dgmppJNI.Ship_addModule__SWIG_1(swigCPtr, this, typeID.swigValue(), ignoringRequirements);
    return (cPtr == 0) ? null : new Module(cPtr, false);
  }

  public Module addModule(TypeID typeID) {
    long cPtr = dgmppJNI.Ship_addModule__SWIG_2(swigCPtr, this, typeID.swigValue());
    return (cPtr == 0) ? null : new Module(cPtr, false);
  }

  public Drone addDrone(TypeID typeID, int squadronTag) {
    long cPtr = dgmppJNI.Ship_addDrone__SWIG_0(swigCPtr, this, typeID.swigValue(), squadronTag);
    return (cPtr == 0) ? null : new Drone(cPtr, false);
  }

  public Drone addDrone(TypeID typeID) {
    long cPtr = dgmppJNI.Ship_addDrone__SWIG_1(swigCPtr, this, typeID.swigValue());
    return (cPtr == 0) ? null : new Drone(cPtr, false);
  }

  public void remove(Module module) {
    dgmppJNI.Ship_remove__SWIG_0(swigCPtr, this, Module.getCPtr(module), module);
  }

  public void remove(Drone drone) {
    dgmppJNI.Ship_remove__SWIG_1(swigCPtr, this, Drone.getCPtr(drone), drone);
  }

  public boolean canFit(Module module) {
    return dgmppJNI.Ship_canFit__SWIG_0(swigCPtr, this, Module.getCPtr(module), module);
  }

  public boolean canFit(Drone drone) {
    return dgmppJNI.Ship_canFit__SWIG_1(swigCPtr, this, Drone.getCPtr(drone), drone);
  }

  public Modules modules(Module.Slot slot) {
    return new Modules(dgmppJNI.Ship_modules__SWIG_0(swigCPtr, this, slot.swigValue()), true);
  }

  public Modules modules() {
    return new Modules(dgmppJNI.Ship_modules__SWIG_1(swigCPtr, this), true);
  }

  public Drones drones() {
    return new Drones(dgmppJNI.Ship_drones(swigCPtr, this), true);
  }

  public Area area() {
    long cPtr = dgmppJNI.Ship_area__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Area(cPtr, false);
  }

  public Area area(TypeID typeID) {
    long cPtr = dgmppJNI.Ship_area__SWIG_1(swigCPtr, this, typeID.swigValue());
    return (cPtr == 0) ? null : new Area(cPtr, false);
  }

  public long totalDroneSquadron(Drone.Squadron squadron) {
    return dgmppJNI.Ship_totalDroneSquadron__SWIG_0(swigCPtr, this, squadron.swigValue());
  }

  public long totalDroneSquadron() {
    return dgmppJNI.Ship_totalDroneSquadron__SWIG_1(swigCPtr, this);
  }

  public long usedDroneSquadron(Drone.Squadron squadron) {
    return dgmppJNI.Ship_usedDroneSquadron__SWIG_0(swigCPtr, this, squadron.swigValue());
  }

  public long usedDroneSquadron() {
    return dgmppJNI.Ship_usedDroneSquadron__SWIG_1(swigCPtr, this);
  }

  public long totalFighterLaunchTubes() {
    return dgmppJNI.Ship_totalFighterLaunchTubes(swigCPtr, this);
  }

  public long usedFighterLaunchTubes() {
    return dgmppJNI.Ship_usedFighterLaunchTubes(swigCPtr, this);
  }

  public long totalSlots(Module.Slot slot) {
    return dgmppJNI.Ship_totalSlots(swigCPtr, this, slot.swigValue());
  }

  public long freeSlots(Module.Slot slot) {
    return dgmppJNI.Ship_freeSlots(swigCPtr, this, slot.swigValue());
  }

  public long usedSlots(Module.Slot slot) {
    return dgmppJNI.Ship_usedSlots(swigCPtr, this, slot.swigValue());
  }

  public long totalHardpoints(Module.Hardpoint hardpoint) {
    return dgmppJNI.Ship_totalHardpoints(swigCPtr, this, hardpoint.swigValue());
  }

  public long freeHardpoints(Module.Hardpoint hardpoint) {
    return dgmppJNI.Ship_freeHardpoints(swigCPtr, this, hardpoint.swigValue());
  }

  public long usedHardpoints(Module.Hardpoint hardpoint) {
    return dgmppJNI.Ship_usedHardpoints(swigCPtr, this, hardpoint.swigValue());
  }

  public Capacitor capacitor() {
    return new Capacitor(dgmppJNI.Ship_capacitor(swigCPtr, this), false);
  }

  public double usedCalibration() {
    return dgmppJNI.Ship_usedCalibration(swigCPtr, this);
  }

  public double totalCalibration() {
    return dgmppJNI.Ship_totalCalibration(swigCPtr, this);
  }

  public double usedPowerGrid() {
    return dgmppJNI.Ship_usedPowerGrid(swigCPtr, this);
  }

  public double totalPowerGrid() {
    return dgmppJNI.Ship_totalPowerGrid(swigCPtr, this);
  }

  public double usedCPU() {
    return dgmppJNI.Ship_usedCPU(swigCPtr, this);
  }

  public double totalCPU() {
    return dgmppJNI.Ship_totalCPU(swigCPtr, this);
  }

  public double usedDroneBandwidth() {
    return dgmppJNI.Ship_usedDroneBandwidth(swigCPtr, this);
  }

  public double totalDroneBandwidth() {
    return dgmppJNI.Ship_totalDroneBandwidth(swigCPtr, this);
  }

  public double usedDroneBay() {
    return dgmppJNI.Ship_usedDroneBay(swigCPtr, this);
  }

  public double totalDroneBay() {
    return dgmppJNI.Ship_totalDroneBay(swigCPtr, this);
  }

  public double usedFighterHangar() {
    return dgmppJNI.Ship_usedFighterHangar(swigCPtr, this);
  }

  public double totalFighterHangar() {
    return dgmppJNI.Ship_totalFighterHangar(swigCPtr, this);
  }

  public double cargoCapacity() {
    return dgmppJNI.Ship_cargoCapacity(swigCPtr, this);
  }

  public double oreHoldCapacity() {
    return dgmppJNI.Ship_oreHoldCapacity(swigCPtr, this);
  }

  public Resistances resistances() {
    return new Resistances(dgmppJNI.Ship_resistances(swigCPtr, this), true);
  }

  public Tank tank() {
    return new Tank(dgmppJNI.Ship_tank(swigCPtr, this), true);
  }

  public Tank effectiveTank() {
    return new Tank(dgmppJNI.Ship_effectiveTank(swigCPtr, this), true);
  }

  public Tank sustainableTank() {
    return new Tank(dgmppJNI.Ship_sustainableTank(swigCPtr, this), true);
  }

  public Tank effectiveSustainableTank() {
    return new Tank(dgmppJNI.Ship_effectiveSustainableTank(swigCPtr, this), true);
  }

  public HitPoints hitPoints() {
    return new HitPoints(dgmppJNI.Ship_hitPoints(swigCPtr, this), true);
  }

  public HitPoints effectiveHitPoints() {
    return new HitPoints(dgmppJNI.Ship_effectiveHitPoints(swigCPtr, this), true);
  }

  public DamageVector turretsVolley() {
    return new DamageVector(dgmppJNI.Ship_turretsVolley(swigCPtr, this), true);
  }

  public DamageVector launchersVolley() {
    return new DamageVector(dgmppJNI.Ship_launchersVolley(swigCPtr, this), true);
  }

  public DamageVector dronesVolley() {
    return new DamageVector(dgmppJNI.Ship_dronesVolley(swigCPtr, this), true);
  }

  public DamagePerSecond turretsDPS() {
    return new DamagePerSecond(dgmppJNI.Ship_turretsDPS(swigCPtr, this), true);
  }

  public DamagePerSecond launchersDPS() {
    return new DamagePerSecond(dgmppJNI.Ship_launchersDPS(swigCPtr, this), true);
  }

  public DamagePerSecond dronesDPS() {
    return new DamagePerSecond(dgmppJNI.Ship_dronesDPS(swigCPtr, this), true);
  }

  public UnitsPerSecond minerYield() {
    return new UnitsPerSecond(dgmppJNI.Ship_minerYield(swigCPtr, this), true);
  }

  public UnitsPerSecond droneYield() {
    return new UnitsPerSecond(dgmppJNI.Ship_droneYield(swigCPtr, this), true);
  }

  public double alignTime() {
    return dgmppJNI.Ship_alignTime(swigCPtr, this);
  }

  public UnitsPerSecond warpSpeed() {
    return new UnitsPerSecond(dgmppJNI.Ship_warpSpeed(swigCPtr, this), true);
  }

  public double maxWarpDistance() {
    return dgmppJNI.Ship_maxWarpDistance(swigCPtr, this);
  }

  public UnitsPerSecond velocity() {
    return new UnitsPerSecond(dgmppJNI.Ship_velocity(swigCPtr, this), true);
  }

  public double signatureRadius() {
    return dgmppJNI.Ship_signatureRadius(swigCPtr, this);
  }

  public double mass() {
    return dgmppJNI.Ship_mass(swigCPtr, this);
  }

  public double volume() {
    return dgmppJNI.Ship_volume(swigCPtr, this);
  }

  public double agility() {
    return dgmppJNI.Ship_agility(swigCPtr, this);
  }

  public UnitsPerSecond maxVelocityInOrbit(double r) {
    return new UnitsPerSecond(dgmppJNI.Ship_maxVelocityInOrbit(swigCPtr, this, r), true);
  }

  public double orbitRadiusWithTransverseVelocity(UnitsPerSecond v) {
    return dgmppJNI.Ship_orbitRadiusWithTransverseVelocity(swigCPtr, this, UnitsPerSecond.getCPtr(v), v);
  }

  public double orbitRadiusWithAngularVelocity(UnitsPerSecond v) {
    return dgmppJNI.Ship_orbitRadiusWithAngularVelocity(swigCPtr, this, UnitsPerSecond.getCPtr(v), v);
  }

  public long maxTargets() {
    return dgmppJNI.Ship_maxTargets(swigCPtr, this);
  }

  public double maxTargetRange() {
    return dgmppJNI.Ship_maxTargetRange(swigCPtr, this);
  }

  public double scanStrength() {
    return dgmppJNI.Ship_scanStrength(swigCPtr, this);
  }

  public Ship.ScanType scanType() {
    return Ship.ScanType.swigToEnum(dgmppJNI.Ship_scanType(swigCPtr, this));
  }

  public double probeSize() {
    return dgmppJNI.Ship_probeSize(swigCPtr, this);
  }

  public double scanResolution() {
    return dgmppJNI.Ship_scanResolution(swigCPtr, this);
  }

  public final static class ScanType {
    public final static Ship.ScanType radar = new Ship.ScanType("radar");
    public final static Ship.ScanType ladar = new Ship.ScanType("ladar");
    public final static Ship.ScanType magnetometric = new Ship.ScanType("magnetometric");
    public final static Ship.ScanType gravimetric = new Ship.ScanType("gravimetric");
    public final static Ship.ScanType multispectral = new Ship.ScanType("multispectral");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ScanType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ScanType.class + " with value " + swigValue);
    }

    private ScanType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ScanType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ScanType(String swigName, ScanType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ScanType[] swigValues = { radar, ladar, magnetometric, gravimetric, multispectral };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class RigSize {
    public final static Ship.RigSize none = new Ship.RigSize("none", dgmppJNI.Ship_RigSize_none_get());
    public final static Ship.RigSize small = new Ship.RigSize("small", dgmppJNI.Ship_RigSize_small_get());
    public final static Ship.RigSize medium = new Ship.RigSize("medium", dgmppJNI.Ship_RigSize_medium_get());
    public final static Ship.RigSize large = new Ship.RigSize("large", dgmppJNI.Ship_RigSize_large_get());
    public final static Ship.RigSize xLarge = new Ship.RigSize("xLarge", dgmppJNI.Ship_RigSize_xLarge_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static RigSize swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + RigSize.class + " with value " + swigValue);
    }

    private RigSize(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private RigSize(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private RigSize(String swigName, RigSize swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static RigSize[] swigValues = { none, small, medium, large, xLarge };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
